{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","findUserById","usersFromServer","filter","initialTodos","userId","App","useState","titleTodo","setTitleTodo","selectedUser","setSelectedUser","setTodos","emptyTitle","setEmptyTitle","isSelectedUser","setIsSelectedUser","action","method","onSubmit","event","preventDefault","length","sort","t1","t2","prevTodos","type","value","placeholder","onChange","target","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c4baf6f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo = ({ user }: Props) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo = ({ todo }: Props) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList = ({ todos }: Props) => {\n  return (\n    <section className=\"TodoList\">\n      {\n        todos.map(todo => (\n          <TodoInfo todo={todo} />\n        ))\n      }\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst findUserById = (id: number): User => {\n  return usersFromServer.filter(user => user.id === id)[0];\n};\n\nconst initialTodos: Todo[] = todosFromServer.map((todo) => {\n  return {\n    id: todo.id,\n    title: todo.title,\n    completed: todo.completed,\n    user: findUserById(todo.userId),\n  };\n});\n\nexport const App = () => {\n  const [titleTodo, setTitleTodo] = useState('');\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [todos, setTodos] = useState(initialTodos);\n\n  const [emptyTitle, setEmptyTitle] = useState(false);\n  const [isSelectedUser, setIsSelectedUser] = useState(false);\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (titleTodo === '') {\n      setEmptyTitle(true);\n    }\n\n    if (selectedUser === 0) {\n      setIsSelectedUser(true);\n    }\n\n    if (selectedUser === 0 || titleTodo === '') {\n      return;\n    }\n\n    const todo: Todo = {\n      id: todos.length > 0\n        ? (todos.sort((t1, t2) => t2.id - t1.id)[0].id) + 1\n        : 0,\n      completed: false,\n      title: titleTodo,\n      user: findUserById(selectedUser),\n    };\n\n    setTodos(prevTodos => [...prevTodos, todo]);\n\n    setTitleTodo('');\n    setSelectedUser(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={addTodo}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={titleTodo}\n            placeholder=\"Enter a title\"\n            onChange={event => {\n              setEmptyTitle(false);\n              setTitleTodo(event.target.value);\n            }}\n          />\n\n          {emptyTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            onChange={(event) => {\n              setSelectedUser(+event.target.value);\n              setIsSelectedUser(false);\n            }}\n          >\n            <option\n              value=\"0\"\n              disabled\n              selected={selectedUser === 0}\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {isSelectedUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}